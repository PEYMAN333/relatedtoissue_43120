import numpy as np
import keras
from keras import models
import threading

def fun(iii,ii):
    feature=np.load(r'feature_{jjj}_{jj}.npy'.format(jjj=iii , jj=ii))
    targetA=np.load(r'targetA_{jjj}_{jj}.npy'.format(jjj=iii , jj=ii))
    targetB=np.load(r'targetB_{jjj}_{jj}.npy'.format(jjj=iii , jj=ii))
    return (feature, targetA, targetB)


class threadsafe_iter:
    """Takes an iterator/generator and makes it thread-safe by
    serializing call to the `next` method of given iterator/generator.
    """
    def __init__(self, it):
        self.it = it
        self.lock = threading.Lock()

    def __iter__(self):
        return self

    def __next__(self):
        with self.lock:
            return self.it.__next__()


def threadsafe_generator(f):
    """A decorator that takes a generator function and makes it thread-safe.
    """
    def g(*a, **kw):
        return threadsafe_iter(f(*a, **kw))
    return g

@threadsafe_generator
def gen(batchsize):
    #print('generator initiated')
    idx = 0; idxi = 0; iii = 1; ii = 1 
    ff, ta, td = fun(iii, ii); L = len(ff)
    while True:
        if  (idxi+1)*batchsize < L:
            yield ff[idxi*batchsize:(idxi+1)*batchsize], [ta[idxi*batchsize:(idxi+1)*batchsize], td[idxi*batchsize:(idxi+1)*batchsize]]
            print('generator yielded a batch %d' % idx)
            idxi += 1
            idx += 1
        else:
            if ii <= 1:      
                idxi = 0; ii +=1
                ff, ta, td = fun(iii, ii)
                yield ff[idxi*batchsize:(idxi+1)*batchsize], [ta[idxi*batchsize:(idxi+1)*batchsize], td[idxi*batchsize:(idxi+1)*batchsize]]
                print('generator yielded a batch %d' % idx)
                idxi += 1
                idx += 1
            else:
                if iii >= 2: iii = 0  
                idxi = 0; ii = 1; iii += 1
                ff, ta, td = fun(iii, ii)
                yield ff[idxi*batchsize:(idxi+1)*batchsize], [ta[idxi*batchsize:(idxi+1)*batchsize], td[idxi*batchsize:(idxi+1)*batchsize]]
                print('generator yielded a batch %d' % idx)
                idxi += 1
                idx += 1
                 
         
        print('iii = ', iii, ' ; ii = ', ii, 'idxi = ', idxi-1)

@threadsafe_generator   
def genVAL(batchsize):
    print('generator initiated')
    idx = 0; idxi = 0; iii = 1; ii = 1 
    ff, ta, td = fun(iii, ii); L = len(ff)
    while True:
        if  (idxi+1)*batchsize < L:
            yield ff[idxi*batchsize:(idxi+1)*batchsize], [ta[idxi*batchsize:(idxi+1)*batchsize], td[idxi*batchsize:(idxi+1)*batchsize]]
            print('generator yielded a batch %d' % idx)
            idxi += 1
            idx += 1
        else:
            if ii <= 1:     
                idxi = 0; ii +=1
                ff, ta, td = fun(iii, ii)
                yield ff[idxi*batchsize:(idxi+1)*batchsize], [ta[idxi*batchsize:(idxi+1)*batchsize], td[idxi*batchsize:(idxi+1)*batchsize]]
                print('generator yielded a batch %d' % idx)
                idxi += 1
                idx += 1
            else:
                if iii >= 2: iii = 0  
                idxi = 0; ii = 1; iii += 1
                ff, ta, td = fun(iii, ii)
                yield ff[idxi*batchsize:(idxi+1)*batchsize], [ta[idxi*batchsize:(idxi+1)*batchsize], td[idxi*batchsize:(idxi+1)*batchsize]]
                print('generator yielded a batch %d' % idx)
                idxi += 1
                idx += 1
                 
         
        print('iii = ', iii, ' ; ii = ', ii, 'idxi = ', idxi-1)         


model = models.load_model(r'deepmodel_2.h5')
tr_gen = gen(batchsize=128) 
val_gen = genVAL(batchsize=128) 
filepath = r'trainedmodelG_2._{epoch:02d}.h5'
mycallback = keras.callbacks.ModelCheckpoint(filepath, monitor='val_loss', verbose=0, save_best_only=False, save_weights_only=False, mode='auto', save_freq='epoch')
my_callback = [mycallback]
history = model.fit(tr_gen, validation_data=(val_gen), steps_per_epoch=10, validation_steps=5, epochs=3, max_queue_size=5, callbacks=my_callback)
